Minimal dependencies:
* A Pascal Compiler (Free Pascal
  <http://www.freepascal.org/> [2.4 or higher] is recommended.
  GNU Pascal <http://gnu-pascal.de/> will compile it, but the
  binary is much more crash-prone (See the file gnu-pascal for more
  information).  Patches for other compilers are welcome).
* Unix tools (preferably, the GNU versions):
  * Those included with Free Pascal plus:
    * cut
    * grep
    * sed <http://sed.sourceforge.net/>
    * test
    * touch
    (The source code for the GNU versions of these programs can be
    found at <http://www.gnu.org/software/>, but I'd recommend
    using a search engine to find the appropriate versions for
    your operating system.)
* (Windows only) png2ico
  <http://www.winterdrache.de/freeware/png2ico/>

Optional dependencies (see below for how to enable/disable):
* Expat <http://libexpat.org>
* iconv
* gettext <http://gnu.org/software/gettext>
* libcurl <http://curl.haxx.se/>
* libidn <http://gnu.org/software/libidn>
* libini <http://sourceforge.net/projects/libini>
* readline <http://gnu.org/software/readline> or
  libedit <http://www.thrysoee.dk/editline/>
* PCRE <http://pcre.org>
* Synapse <http://synapse.ararat.cz>
* For a GUI:
  * a C++ compiler; I'm only testing in GCC <http://gcc.gnu.org/>
  * wxWidgets <http://wxwidgets.org/>

If building with GNU Pascal, please read the file gnu-pascal
for its extra requirements.

After you have the dependencies, open a shell in the root source
directory and do:
make [rules] [environment-variables]
make install [environment-variables]

Helpful make rules:
clean
  Removes all the build files generated by the compiler.
install
  Install the program and other files
  (icons, gettext catalogs, etc.).

Helpful environment variables:
BUILDDIR
  Where the built programs should go.
  (See the notes below.)
CC
  The C compiler to use (default: gcc).
CXX
  The C++ compiler to use (default: g++).
DEBUG
  Create a debug build (for developers and testers only).
DEFS_EXTRA
  Extra defines to send to the compiler.
DEFS_SETTINGS
  The type of settings to use:
  * SETTINGS_INI: Use the Delphi/Free Pascal TIniFile class
    to read/write the settings to a .ini file.
  * SETTINGS_LIBINI: Use libini <http://sourceforge.net/projects/libini>
    to read/write settings to a .ini file.
  * SETTINGS_REG: Use the Delphi/Free Pascal TRegistry class to
    read/write the settings to the registry (or to
    GetAppConfigDir(false)/reg.xml on non-Windows versions of
    Free Pascal).
  (The default depends on the compiler and OS.)
DEFS_SOCKETS
  The sockets library to use:
  * SOCKETS_BSD: Use the low-level BSD sockets wrapper
    (*nix and Windows). Requires a C compiler. (Extremely buggy!)
  * SOCKETS_CURL: Use cURL <http://curl.haxx.se/> to retrieve
    the feeds. There are limitations, but it should be the most
    portable solution.
  * SOCKETS_LIBCURL: Use libcurl (cURL's library) directly instead
    of having to invoke the cURL program. (Experimental!)
  * SOCKETS_NONE: Build without sockets support.
  * SOCKETS_SYNAPSE: Use Ararat Synapse (Delphi and Free Pascal)
    <http://synapse.ararat.cz>.
  (Currently the default is SOCKETS_LIBCURL with GNU Pascal and
   SOCKETS_SYNAPSE with Free Pascal.)
DESTDIR
  Where to install the software.
PCFLAGS_DEBUG
  The compiler's debugging options.
PCFLAGS_EXTRA
  Extra options to send to the compiler.
R3R_UI
  The user interface to use.  Look in the ./src/ui directory for
  available user interfaces.  The default varies, depending on
  multiple factors.
USE_FPC
  Use Free Pascal to compile (recommended).
USE_GPC
  Use GNU Pascal to compile.

The configure script:
The project includes a home-grown configure script, which:
1. Writes default macros (environment variables) to a config.make
   file in the current directory.
2. Calls make check to insure that everything is in order.
(It is not an autotools configure script.  You can attempt a compile
even if make check fails.  When using GPC make check will always
succeed because the gp utility always returns a success exit code.)

Enabling/disabling features:
You can use the configure script or set the make environment
variables manually (0 to disable; 1 to enable):
EXPAT_2
  Use Expat 2 instead of Expat 1.
  Default: 1
NO_NCURSES
  Enable the use of ncurses <http://gnu.org/software/ncurses> for
  the TUI. It only makes sense in Free Pascal on Unix platforms.
  Default: 0
USE_EXPAT
  Allow the use of Expat to parse XML files.
  Note: Expat is required for RSS and Atom feeds.  If you're only
  interested in ESF feeds, then you can disable this.
  Default: 1
USE_ICONV
  Allow the use of iconv to convert between character encodings.
  Note: It's very handy on Windows and on GPC builds on all
  operating systems, as they don't handle Unicode very well.
  Default: 1
USE_IDN
  Allow the use of the libidn library to decode IDN (web addresses
  with non-English characters).
  Default: 1
USE_LIBEDIT
  Use libedit's readline emulation (only valid when USE_READLINE
  is defined).  Beware that libedit is very buggy, especially
  when a screen library is used (as is in the TUI).
  Default: 0
USE_LIBICONV
  Enable the use of GNU libiconv <http://gnu.org/software/libiconv>
  instead of the built-in iconv.  Only valid when USE_ICONV is also
  defined.
  Default: 0 for Unix platforms; 1 for non-Unix platforms
USE_NLS
  Allow the use of gettext to enable NLS (native language support).
  Default: 1
USE_PCRE
  Allow the use of PCRE to allow more powerful text matching.
  Default: 1
USE_READLINE
  Use GNU readline to keep a history of visited URLs.
  Default: 1
USE_SSL
  Allow secure HTTP connections via SSL.
  Note: It only works with the Synapse and (undertested) cURL
  sockets backends (see the DEFS_SOCKETS variable above).
  Default: 0

Out-of-source builds:
The configure script will do that for you.  If you're not using the
configure script, use the BUILDDIR environment variable.  Also use
the SRCDIR environment variable if you're not building in the
project root.  They must be absolute directory paths (again, the
configure script will convert the paths to absolute paths for you);
in other words you can either of these in the source directory:
1. make BUILDDIR=$(pwd)/BUILD.
2. mkdir BUILD; cd BUILD; ../configure; make).
