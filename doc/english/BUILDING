Minimal dependencies:
* A Pascal Compiler (Free Pascal
  <http://www.freepascal.org/> is recommended. GNU Pascal
  <http://gnu-pascal.de/> will compile it, but the binary is much
  more crash-prone.  Patches for other compilers are welcome).
* Unix tools (preferably, the GNU versions):
  * Those included with Free Pascal plus:
    * gettext: For translating the program into different
      languages.
    * grep
    * libidn
    * sed <http://sed.sourceforge.net/>
    * test
    * touch
    (The source code for the GNU versions of these programs can be
    found at <http://www.gnu.org/software/>, but I'd recommend
    using a search engine to find the appropriate versions for
    your operating system.)
* Expat <http://libexpat.org>
* (Windows only) png2ico
  <http://www.winterdrache.de/freeware/png2ico/>
* For a GUI:
  * a C++ compiler; I'm only testing in GCC <http://gcc.gnu.org/>
  * wxWidgets <http://wxwidgets.org/>
* If building with GNU Pascal, please read the file gnu-pascal
  for its extra requirements.

After you have the dependencies, open a shell in the root source
directory and do:
make [rules] [environment-variables]
make install [environment-variables]

Helpful make rules:
clean:
  Removes all the build files generated by the compiler.
install
  Install the program and other files
  (icons, gettext catalogs, etc.).

Helpful environment variables:
BUILDDIR
  Where the build programs should go.
  (See the notes below.)
CC
  The C compiler to use (default: gcc).
CXX
  The C++ compiler to use (default: g++).
DEBUG
  Create a debug build (for developers and testers only).
DEFS_EXTRA
  Extra defines to send to the compiler.
DEFS_SETTINGS
  The type of settings to use:
  * SETTINGS_BIN: Dump the internal settings structure to a
    binary file and read it during startup (not recommended).
  * SETTINGS_INI: Use the Delphi/Free Pascal TIniFile class
    to read/write the settings to a .ini file.
  * SETTINGS_REG: Use the Delphi/Free Pascal TRegistry class to
    read/write the settings to the registry (or to
    GetAppConfigDir(false)/reg.xml on non-Windows versions of
    Free Pascal).
  * SETTINGS_TAB: Use the TTabFile object to read/write settings
    to a .tab file.
  (The default depends on the compiler and OS.)
DEFS_SOCKETS
  The sockets library to use:
  * SOCKETS_BSD: Use the low-level BSD sockets wrapper
    (*nix and Windows). Requires a C compiler.
  * SOCKETS_SYNAPSE: Use Ararat Synapse (Delphi and Free Pascal)
    <http://synapse.ararat.cz>.
  (Currently the default is SOCKETS_BSD with GNU Pascal and
   SOCKETS_SYNAPSE with Free Pascal.)
DESTDIR
  Where to install the software.
EXEEXT
  The file extension for executables.  Operating systems that have
  such extensions may need to have this defined in order for
  compilation to succeed.
PCFLAGS_DEBUG
  The compiler's debugging options.
PCFLAGS_EXTRA
  Extra options to send to the compiler.
R3R_UI
  The user interface to use.  Look in the ./src/ui directory for
  available user interfaces.  The default varies, depending on
  multiple factors.
USE_FPC
  Use Free Pascal to compile (recommended).
USE_GPC
  Use GNU Pascal to compile.
USE_NCRT
  Use the nCRT and ncurses units instead of CRT for the TUI in
  Free Pascal.

The configure script:
The project includes a home-grown configure script, which:
1. Writes default macros (environment variables) to a config.make
   file in the current directory.
2. Calls make check to insure that everything is in order.
(It is not an autotools configure script.  You can attempt a compile
even if make check fails.  When using GPC make check will always
succeed because the gp utility always returns a success exit code.)

Out-of-source builds:
The configure script will do that for you.  If you're not using the
configure script, use the BUILDDIR environment variable.  Also use
the SRCDIR environment variable if you're not building in the
project root.  They must be absolute directory paths (again, the
configure script will convert the paths to absolute paths for you;
in other words you can either of these in the source directory:
1. make BUILDDIR=$(pwd)/BUILD.
2. mkdir BUILD; cd BUILD; ../configure; make).
