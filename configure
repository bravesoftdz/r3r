#! /bin/env perl

@languages = ('de', 'en', 'eo');
$version = '2.0-alpha4-dev';

# Hash (transitive verb) the command-line arguments
sub hash_args
{
  @args = @ARGV;
  foreach $arg (@args)
  {
    @argparts = split('=', $arg);
    $argparts[0] =~ s/^-*//g;
    $rv{$argparts[0]} = $argparts[1];
  }

  return %rv;
}
%clargs = hash_args;

sub show_usage
{
  die "Usage: configure [--usage | [[--quiet[=yes]] [--input=FILE --output=FILE] [--with-ui=tui] [--disable-nls] [--prefix=PATH]]]\n";
}

sub get_language_deps
{
  my $rv;
  $rv = 'libr3r/po/messages$(MESSAGES_TEMPLATE) $(R3R_UI)/po/messages$(MESSAGES_TEMPLATE)';
  if (!exists($clargs{'disable-nls'}))
  {
    foreach $lang (@languages)
    {
      $rv .= ' libr3r/po/' . $lang . '$(MESSAGES_COMPILED)';
      $rv .= ' $(R3R_UI)/po/' . $lang . '$(MESSAGES_COMPILED)';
    }
  }

  return $rv;
}
$language_deps = get_language_deps;

$ui = $clargs{'with-ui'};
if (!$ui)
{
  $ui = 'tui';
}

sub get_install_langs
{
  my $rv;

  ($action, $localedir) = @_;
  if (!$localedir)
  {
    $localedir = '$(localedir)';
  }

  if (!exists($clargs{'disable-nls'}))
  {
    foreach $lang (@languages)
    {
     $rv .= "\n$action" . ' libr3r/po/' . $lang . '.mo ' . "$localedir/$lang/LC_MESSAGES/libr3r.mo";
     $rv .= "\n$action $ui" . '/po/' . $lang . '.mo ' . "$localedir/$lang/LC_MESSAGES/r3r_$ui.mo";
    }
  }

  return $rv;
}
$install_langs = get_install_langs("\t" . '$(INSTALL)');
$ap_copy_langs = get_install_langs('copyFiles', '$PREFIX/share/locale');

sub get_uninstall_langs
{
  my $rv;
  $rv = get_install_langs(@_);
  # Strip out the source files
  $rv =~ s/(\t\S+)\s*\S+/$1/g;
  return $rv;
}
$uninstall_langs = get_uninstall_langs("\t" . '$(RM)');

sub get_is_install_langs
{
  my $rv;
  $rv = get_install_langs('Source: "', '"; DestDir: "{app}\share\locale');
  # Replace *nix slashes with *doze backslashes
  $rv =~ s/\//\\/g;
  # Add doublequotes to the end of lines
  $rv =~ s/(.)$/$1\";/g;
  $rv =~ s/(\.mo)(\nSource)/$1\";$2/g;
  # Adjust the paths to the mo files
  $rv =~ s/(\"\s*)(\w)/$1..\\..\\$2/g;
  # Remove the whitespace
  $rv =~ s/(\")(\s*)(\S+)(\s*)(\")/$1$3$5/g;

  return $rv;
}
$is_install_langs= get_is_install_langs;

sub write_file
{
  ($infile, $outfile) = @_;

  # Go through $infile, replace the variables with values and write to $outfile
  open INFILE, "<$infile";
  open OUTFILE, ">$outfile";

  while (!eof(INFILE))
  {
    read INFILE, $in, 255;

    while (true)
    {
      $count = $in =~ s/\$\{perl:([^\}]+)\}/$$1/;
      if (!$count)
      {
        last;
      }
    }

    print OUTFILE $in;
  }
  close OUTFILE;
  close INFILE;
}

sub write_makefile
{
  $quiet = exists($clargs{'quiet'}) && $clargs{'quiet'} ne 'no';
  if (!$quiet)
  {
    print <<EOM;
Before building this software, you'll need to be sure that you understand
how to build the software and your rights when using, modifying or distributing
it.  Please read the README and LICENSE files before continuing.\n
EOM
    print "Generating Makefile...\n";
  }

  $prefix = $clargs{'prefix'};
  if (!$prefix)
  {
    $prefix = '/usr/local';
  }

  write_file('Makefile.in', 'Makefile');

  if (!$quiet)
  {
    print "Done.\n\n";
    print "Now run GNU make in the current directory to build the software.\n";
  }
}

if (exists($clargs{'usage'}) || exists($clargs{'help'}) || exists($clargs{'h'}))
{
  show_usage;
}

if (exists($clargs{'input'}) && exists($clargs{'output'}))
{
  write_file($clargs{'input'}, $clargs{'output'});
}
else
{
  write_makefile;
}
