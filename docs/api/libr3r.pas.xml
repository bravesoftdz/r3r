<?xml version="1.0" encoding="UTF-8"?>  
<fpdoc-description>
  <package name="libr3r">
    <descr>
      The back-end library for R3R, containing code for processing feeds.
    </descr>
    <module name="LibR3R">
      <descr>
        The higher-level part of libr3r.  This is a bridge between the feed processor and front-end user interfaces (UIs).
      </descr>
      <element name="TFeedItem">
        <short>Information about the concerned feed item.</short>
        <descr>
          This is the same as FeedItem.TFeedItem.  The only reason for it is so that this unit is all you need to include in your uses clause (the less back-end stuff in the front end, the better).
          Only use with the <link id="TItemCallback">OnItemParsed</link> event.  In this context, you won't get access violations.
          &lt;rant&gt;If only units had the exportation of imported symbols, like Extended Pascal modules do, this wouldn't be needed at all.&lt;/rant&gt;
        </descr>
      </element>
      <element name="TItemCallback">
        <descr>Callback function for parsed items.</descr>
      </element>
      <element name="TLibR3R">
        <descr>
          A simple high-level bridge class, which wraps the complicated back-end, making it easier and safer to create new user interfaces.  The general procedure for using the class in a front end: <link id="TLibR3R.Create">Create</link>
          the class, set the <link id="TLibR3R.RegisterItemCallback">item callback</link>,
          tell the back-end to <link id="TLibR3R.Parse">parse</link> the feed, and finally,
          <link id="TLibR3R.Destroy">free</link> the back-end.
          See the existing front ends for examples.
        </descr>
      </element>
      <element name="TLibR3R.Create">
        <descr>
          Initializes the library. It has a deprecated optional parameter, the initial feed to retrieve, for backwards compatibility.
        </descr>
      </element>
      <element name="TLibR3R.Destroy">
        <descr>
          Disconnects from the address, clears used memory, etc.  This should be called indirectly via the Free procedure.
        </descr>
      </element>
      <element name="TLibR3R.QueueURI">
          <descr>
              Add a URI (e.g. a local or remote file) to the queue.
          </descr>
      </element>
      <element name="TLibR3R.UnqueueURI">
          <descr>
              Removes the current URI from the queue.  Useful for stopping processing the current feed.
          </descr>
      </element>
      <element name="TLibR3R.RetrieveChunk">
          <descr>
              Retrieves a chunk of data from the feed.  Returns whether there was data received.  The chunk data itself is sent to the function specified by <link id="TLibR3R.RegisterItemCallback">RegisterItemCallback</link>.
          </descr>
      </element>
      <element name="TLibR3R.RetrieveFeed">
        <descr>
            Retrieves a new feed. Internally, it just puts the feed into <link id="TLibR3R.QueueURI">the queue</link> and calls <link id="TLibR3R.RetrieveChunk">RetrieveChunk</link> in a loop until there's no more data to receive.
        </descr>
      </element>
      <element name="TLibR3R.HandleMessage">
        <descr>
          A virtual method to which any warnings or errors are sent.  A UI may override it to handle those messages.
        </descr>
      </element>
      <element name="TLibR3R.RegisterItemCallback">
        <descr>
          Registers a callback to process items.
        </descr>
      </element>
      <element name="Settings">
        <descr>
          Gives you access to the <link id="TRSettings">TRSettings</link> class.
        </descr>
      </element>
      <element name="Subscriptions">
        <descr>
          Gives access to the <link id="TRSubscriptions">TRSubscriptions</link> object.
        </descr>
      </element>
    </module>
    <module name="RSettings">
      <element name="TRSettings">
        <descr>
          The class giving you access to settings.
        </descr>
      </element>
      <element name="TRSettings.Enumerate">
        <descr>
          Get an array of setting names and values and the number there are.
        </descr>
      </element>
      <element name="TRSettings.IndexOf">
        <descr>
          Get the index of a specific setting for a call to one of the Get* or Set* methods.  The number shouldn't be hard-coded, because they can vary per installation.  It will return -1 if the index isn't found.
        </descr>
      </element>
      <element name="TRSettings.GetBoolean">
        <descr>
          Get a boolean value at the specified index.
        </descr>
      </element>
      <element name="TRSettings.GetInteger">
        <descr>
          Get a integer value at the specified index.
        </descr>
      </element>
      <element name="TRSettings.GetString">
        <descr>
          Get a string value at the specified index.
        </descr>
      </element>
      <element name="TRSettings.SetBoolean">
        <descr>
          Set a boolean value at the specified index.
        </descr>
      </element>
      <element name="TRSettings.SetInteger">
        <descr>
          Set a integer value at the specified index.
        </descr>
      </element>
      <element name="TRSettings.SetString">
        <descr>
          Set a string value at the specified index.
        </descr>
      </element>
      <element name="TRSettings.RegisterBoolean">
        <descr>
          Creates a new boolean setting if one doesn't already exist.
        </descr>
      </element>
      <element name="TRSettings.RegisterInteger">
        <descr>
          Creates a new integer setting if one doesn't already exist.
        </descr>
      </element>
      <element name="TRSettings.RegisterString">
        <descr>
          Creates a new string setting if one doesn't already exist.
        </descr>
      </element>
      <element name="TRSettings.Access">
        <descr>
          Access information about the settings.  This is the only method available to the shared library, but those coding in Object Pascal should use the othehr methods.  Index should be set to 0 to get the index of a setting name; if set to a value greater than 0, it will give you the setting name at the specified index.  The value should be cast to and from pointers (not referenced and dereferenced).  For SettingsMode, use SettingsRead and/or SettingsWrite depending on whether you want to get or set the values.
        </descr>
      </element>
    </module>
    <module name="RSubscriptions">
      <element name="TRSubscriptions">
        <descr>
          The TRSubscriptions object.
        </descr>
      </element>
      <element name="TRSubscriptions.Add">
        <descr>
          Adds a new subscription.
        </descr>
      </element>
      <element name="TRSubscriptions.Delete">
        <descr>
          Deletes a subscription.
        </descr>
      </element>
      <element name="TRSubscriptions.DeleteIndex">
        <descr>
          Deletes the nth (zero-based) subscription.
        </descr>
      </element>
      <element name="TRSubscriptions.Get">
        <descr>
          Gets the Nth (zero-based) subscription.
        </descr>
      </element>
      <element name="TRSubscriptions.Count">
        <descr>
          Gets the number of subscriptions that currently exist.
        </descr>
      </element>
    </module>
  </package>
</fpdoc-description>
